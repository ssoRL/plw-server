/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IClient {
    /**
     * Add a new pet to the store
     * @body Pet object that needs to be added to the store
     */
    addPet(body: Pet): Promise<void>;
    /**
     * Update an existing pet
     * @body Pet object that needs to be added to the store
     */
    updatePet(body: Pet): Promise<void>;
    /**
     * Finds Pets by status
     * @status Status values that need to be considered for filter
     * @return successful operation
     */
    findPetsByStatus(status: Status[]): Promise<Pet[]>;
    /**
     * Finds Pets by tags
     * @tags Tags to filter by
     * @return successful operation
     * @deprecated
     */
    findPetsByTags(tags: string[]): Promise<Pet[]>;
    /**
     * Find pet by ID
     * @petId ID of pet to return
     * @return successful operation
     */
    getPetById(petId: number): Promise<Pet>;
    /**
     * Updates a pet in the store with form data
     * @petId ID of pet that needs to be updated
     * @name (optional) Updated name of the pet
     * @status (optional) Updated status of the pet
     */
    updatePetWithForm(petId: number, name: string, status: string): Promise<void>;
    /**
     * Deletes a pet
     * @api_key (optional) 
     * @petId Pet id to delete
     */
    deletePet(api_key: string, petId: number): Promise<void>;
    /**
     * uploads an image
     * @petId ID of pet to update
     * @additionalMetadata (optional) Additional data to pass to server
     * @file (optional) file to upload
     * @return successful operation
     */
    uploadFile(petId: number, additionalMetadata: string, file: FileParameter): Promise<ApiResponse>;
    /**
     * Returns pet inventories by status
     * @return successful operation
     */
    getInventory(): Promise<{ [key: string] : number; }>;
    /**
     * Place an order for a pet
     * @body order placed for purchasing the pet
     * @return successful operation
     */
    placeOrder(body: Order): Promise<Order>;
    /**
     * Find purchase order by ID
     * @orderId ID of pet that needs to be fetched
     * @return successful operation
     */
    getOrderById(orderId: number): Promise<Order>;
    /**
     * Delete purchase order by ID
     * @orderId ID of the order that needs to be deleted
     */
    deleteOrder(orderId: number): Promise<void>;
    /**
     * Create user
     * @body Created user object
     * @return successful operation
     */
    createUser(body: User): Promise<void>;
    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithArrayInput(body: User[]): Promise<void>;
    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithListInput(body: User[]): Promise<void>;
    /**
     * Logs user into the system
     * @username The user name for login
     * @password The password for login in clear text
     * @return successful operation
     */
    loginUser(username: string, password: string): Promise<string>;
    /**
     * Logs out current logged in user session
     * @return successful operation
     */
    logoutUser(): Promise<void>;
    /**
     * Get user by user name
     * @username The name that needs to be fetched. Use user1 for testing.
     * @return successful operation
     */
    getUserByName(username: string): Promise<User>;
    /**
     * Updated user
     * @username name that need to be updated
     * @body Updated user object
     */
    updateUser(username: string, body: User): Promise<void>;
    /**
     * Delete user
     * @username The name that needs to be deleted
     */
    deleteUser(username: string): Promise<void>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://petstore.swagger.io/v2";
    }

    /**
     * Add a new pet to the store
     * @body Pet object that needs to be added to the store
     */
    addPet(body: Pet): Promise<void> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPet(_response);
        });
    }

    protected processAddPet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 405) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Update an existing pet
     * @body Pet object that needs to be added to the store
     */
    updatePet(body: Pet): Promise<void> {
        let url_ = this.baseUrl + "/pet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePet(_response);
        });
    }

    protected processUpdatePet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 405) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Finds Pets by status
     * @status Status values that need to be considered for filter
     * @return successful operation
     */
    findPetsByStatus(status: Status[]): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByStatus?";
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined and cannot be null.");
        else
            status && status.forEach(item => { url_ += "status=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFindPetsByStatus(_response);
        });
    }

    protected processFindPetsByStatus(response: Response): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Pet[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pet[]>(<any>null);
    }

    /**
     * Finds Pets by tags
     * @tags Tags to filter by
     * @return successful operation
     * @deprecated
     */
    findPetsByTags(tags: string[]): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByTags?";
        if (tags === undefined || tags === null)
            throw new Error("The parameter 'tags' must be defined and cannot be null.");
        else
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFindPetsByTags(_response);
        });
    }

    protected processFindPetsByTags(response: Response): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Pet[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pet[]>(<any>null);
    }

    /**
     * Find pet by ID
     * @petId ID of pet to return
     * @return successful operation
     */
    getPetById(petId: number): Promise<Pet> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPetById(_response);
        });
    }

    protected processGetPetById(response: Response): Promise<Pet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Pet>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pet>(<any>null);
    }

    /**
     * Updates a pet in the store with form data
     * @petId ID of pet that needs to be updated
     * @name (optional) Updated name of the pet
     * @status (optional) Updated status of the pet
     */
    updatePetWithForm(petId: number, name: string, status: string): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name !== null && name !== undefined)
            content_.append("name", name.toString());
        if (status !== null && status !== undefined)
            content_.append("status", status.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePetWithForm(_response);
        });
    }

    protected processUpdatePetWithForm(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 405) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Deletes a pet
     * @api_key (optional) 
     * @petId Pet id to delete
     */
    deletePet(api_key: string, petId: number): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: new Headers({
                "api_key": api_key !== undefined && api_key !== null ? "" + api_key : "", 
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePet(_response);
        });
    }

    protected processDeletePet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * uploads an image
     * @petId ID of pet to update
     * @additionalMetadata (optional) Additional data to pass to server
     * @file (optional) file to upload
     * @return successful operation
     */
    uploadFile(petId: number, additionalMetadata: string, file: FileParameter): Promise<ApiResponse> {
        let url_ = this.baseUrl + "/pet/{petId}/uploadImage";
        if (petId === undefined || petId === null)
            throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (additionalMetadata !== null && additionalMetadata !== undefined)
            content_.append("additionalMetadata", additionalMetadata.toString());
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: Response): Promise<ApiResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <ApiResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse>(<any>null);
    }

    /**
     * Returns pet inventories by status
     * @return successful operation
     */
    getInventory(): Promise<{ [key: string] : number; }> {
        let url_ = this.baseUrl + "/store/inventory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInventory(_response);
        });
    }

    protected processGetInventory(response: Response): Promise<{ [key: string] : number; }> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <{ [key: string] : number; }>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<{ [key: string] : number; }>(<any>null);
    }

    /**
     * Place an order for a pet
     * @body order placed for purchasing the pet
     * @return successful operation
     */
    placeOrder(body: Order): Promise<Order> {
        let url_ = this.baseUrl + "/store/order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlaceOrder(_response);
        });
    }

    protected processPlaceOrder(response: Response): Promise<Order> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Order>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Order>(<any>null);
    }

    /**
     * Find purchase order by ID
     * @orderId ID of pet that needs to be fetched
     * @return successful operation
     */
    getOrderById(orderId: number): Promise<Order> {
        let url_ = this.baseUrl + "/store/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOrderById(_response);
        });
    }

    protected processGetOrderById(response: Response): Promise<Order> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Order>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Order>(<any>null);
    }

    /**
     * Delete purchase order by ID
     * @orderId ID of the order that needs to be deleted
     */
    deleteOrder(orderId: number): Promise<void> {
        let url_ = this.baseUrl + "/store/order/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteOrder(_response);
        });
    }

    protected processDeleteOrder(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Create user
     * @body Created user object
     * @return successful operation
     */
    createUser(body: User): Promise<void> {
        let url_ = this.baseUrl + "/user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        {
            return response.text().then((_responseText) => {
            return;
            });
        }
    }

    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithArrayInput(body: User[]): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithArray";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUsersWithArrayInput(_response);
        });
    }

    protected processCreateUsersWithArrayInput(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        {
            return response.text().then((_responseText) => {
            return;
            });
        }
    }

    /**
     * Creates list of users with given input array
     * @body List of user object
     * @return successful operation
     */
    createUsersWithListInput(body: User[]): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateUsersWithListInput(_response);
        });
    }

    protected processCreateUsersWithListInput(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        {
            return response.text().then((_responseText) => {
            return;
            });
        }
    }

    /**
     * Logs user into the system
     * @username The user name for login
     * @password The password for login in clear text
     * @return successful operation
     */
    loginUser(username: string, password: string): Promise<string> {
        let url_ = this.baseUrl + "/user/login?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginUser(_response);
        });
    }

    protected processLoginUser(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Logs out current logged in user session
     * @return successful operation
     */
    logoutUser(): Promise<void> {
        let url_ = this.baseUrl + "/user/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogoutUser(_response);
        });
    }

    protected processLogoutUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        {
            return response.text().then((_responseText) => {
            return;
            });
        }
    }

    /**
     * Get user by user name
     * @username The name that needs to be fetched. Use user1 for testing.
     * @return successful operation
     */
    getUserByName(username: string): Promise<User> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserByName(_response);
        });
    }

    protected processGetUserByName(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <User>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * Updated user
     * @username name that need to be updated
     * @body Updated user object
     */
    updateUser(username: string, body: User): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Delete user
     * @username The name that needs to be deleted
     */
    deleteUser(username: string): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface Order {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    /** Order Status */
    status?: OrderStatus;
    complete?: boolean;
}

export interface User {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /** User Status */
    userStatus?: number;
}

export interface Category {
    id?: number;
    name?: string;
}

export interface Tag {
    id?: number;
    name?: string;
}

export interface Pet {
    id?: number;
    category?: Category;
    name: string;
    photoUrls: string[];
    tags?: Tag[];
    /** pet status in the store */
    status?: PetStatus;
}

export interface ApiResponse {
    code?: number;
    type?: string;
    message?: string;
}

export enum Status {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

export enum OrderStatus {
    Placed = <any>"placed", 
    Approved = <any>"approved", 
    Delivered = <any>"delivered", 
}

export enum PetStatus {
    Available = <any>"available", 
    Pending = <any>"pending", 
    Sold = <any>"sold", 
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}